{
    "version": 3,
    "terraform_version": "0.11.11",
    "serial": 4,
    "lineage": "4e9755f9-1f42-0a48-5294-a0d78941f815",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {},
            "resources": {
                "aws_ssm_document.mongodb_replication_primary": {
                    "type": "aws_ssm_document",
                    "depends_on": [
                        "data.template_file.mongodb_replication_primary"
                    ],
                    "primary": {
                        "id": "Launch_Automation_for_mongodb_replication_primary",
                        "attributes": {
                            "arn": "arn:aws:ssm:ap-south-1:611962639397:document/Launch_Automation_for_mongodb_replication_primary",
                            "content": "{\n    \"description\": \"Launch Automation Install MongoDB with Replication\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installdependencies\"\n        },\n        {\n            \"name\": \"installdependencies\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"cd ~\\n\",\n                        \"yum install wget vim -y\\n\",\n                        \"curl -O https://bootstrap.pypa.io/get-pip.py\\n\",\n                        \"python get-pip.py\\n\",\n                        \"pip install awscli\\n\",\n                        \"yum -y install firewalld\\n\",\n                        \"sed -i -e 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux\\n\"\n                    ]\n                }\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\",\n                        \"echo mongodb-primary \u003e /etc/hostname\\n\",\n                        \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n                        \"ipmongoprimary=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`ipmongoprimary`].Value' --output text)\\n\",\n                        \"ipmongosecondary=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`ipmongosecondary`].Value' --output text)\\n\",\n                        \"echo $ipmongoprimary mongodb-primary \u003e\u003e /etc/hosts\\n\",\n                        \"echo $ipmongosecondary mongodb-secondary \u003e\u003e /etc/hosts\\n\",\n                        \"reboot\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installmongoDB\"\n        },\n        {\n            \"name\": \"installmongoDB\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"systemctl start firewalld\\n\",\n                        \"systemctl enable firewalld\\n\",\n                        \"firewall-cmd --permanent --add-port=22/tcp\\n\",\n                        \"firewall-cmd --permanent --add-port=27017/tcp\\n\",\n                        \"firewall-cmd --reload\\n\",\n                        \"cd ~\\n\",\n                        \"yum install wget vim -y\\n\",\n                        \"wget https://s3.ap-south-1.amazonaws.com/app-server-ilantus/mongo.repo.txt\\n\",\n                        \"cp mongo.repo.txt /etc/yum.repos.d/mongodb-org.repo\\n\",\n                        \"yum repolist\\n\",\n                        \"yum install mongodb-org -y\\n\",\n                        \"systemctl start mongod\\n\",\n                        \"sed -i -e 's/  bindIp: 127.0.0.1/#  bindIp: 127.0.0.1/g' /etc/mongod.conf\\n\",\n                        \"echo 'replication:'  \u003e\u003e /etc/mongod.conf\\n\",\n                        \"echo '  replSetName: \\\"ilantus\\\"'  \u003e\u003e /etc/mongod.conf\\n\",\n                        \"systemctl restart mongod\\n\"\n                    ]\n                }\n            },\n            \"nextStep\": \"configuremongodb\"\n        }\n    ]\n}",
                            "default_version": "1",
                            "description": "Launch Automation Install MongoDB with Replication",
                            "document_format": "JSON",
                            "document_type": "Automation",
                            "hash": "aeb7cb35dacc71e095e3cfd2d99ce0be11f12f8804c0829ddeeb55ed95d3f744",
                            "hash_type": "Sha256",
                            "id": "Launch_Automation_for_mongodb_replication_primary",
                            "latest_version": "1",
                            "name": "Launch_Automation_for_mongodb_replication_primary",
                            "owner": "611962639397",
                            "parameter.#": "1",
                            "parameter.0.default_value": "",
                            "parameter.0.description": "InstanceIds to run launch setup",
                            "parameter.0.name": "instanceIds",
                            "parameter.0.type": "StringList",
                            "permissions.%": "0",
                            "platform_types.#": "2",
                            "platform_types.0": "Windows",
                            "platform_types.1": "Linux",
                            "schema_version": "0.3",
                            "status": "Active",
                            "tags.%": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_ssm_document.mongodb_replication_secondary": {
                    "type": "aws_ssm_document",
                    "depends_on": [
                        "data.template_file.mongodb_replication_secondary"
                    ],
                    "primary": {
                        "id": "Launch_Automation_for_mongodb_replication_secondary",
                        "attributes": {
                            "arn": "arn:aws:ssm:ap-south-1:611962639397:document/Launch_Automation_for_mongodb_replication_secondary",
                            "content": "{\n    \"description\": \"Launch Automation Install MongoDB with Replication\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installdependencies\"\n        },\n        {\n            \"name\": \"installdependencies\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"cd ~\\n\",\n                        \"yum install wget vim -y\\n\",\n                        \"curl -O https://bootstrap.pypa.io/get-pip.py\\n\",\n                        \"python get-pip.py\\n\",\n                        \"pip install awscli\\n\",\n                        \"yum -y install firewalld\\n\",\n                        \"sed -i -e 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux\\n\"\n                    ]\n                }\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\",\n                        \"echo mongodb-secondary \u003e /etc/hostname\\n\",\n                        \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n                        \"ipmongoprimary=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`ipmongoprimary`].Value' --output text)\\n\",\n                        \"ipmongosecondary=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`ipmongosecondary`].Value' --output text)\\n\",\n                        \"echo $ipmongoprimary mongodb-primary \u003e\u003e /etc/hosts\\n\",\n                        \"echo $ipmongosecondary mongodb-secondary \u003e\u003e /etc/hosts\\n\",\n                        \"reboot\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installmongoDB\"\n        },\n        {\n            \"name\": \"installmongoDB\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"systemctl start firewalld\\n\",\n                        \"systemctl enable firewalld\\n\",\n                        \"firewall-cmd --permanent --add-port=22/tcp\\n\",\n                        \"firewall-cmd --permanent --add-port=27017/tcp\\n\",\n                        \"firewall-cmd --reload\\n\",\n                        \"cd ~\\n\",\n                        \"yum install wget vim -y\\n\",\n                        \"wget https://s3.ap-south-1.amazonaws.com/app-server-ilantus/mongo.repo.txt\\n\",\n                        \"cp mongo.repo.txt /etc/yum.repos.d/mongodb-org.repo\\n\",\n                        \"yum repolist\\n\",\n                        \"yum install mongodb-org -y\\n\",\n                        \"systemctl start mongod\\n\",\n                        \"sed -i -e 's/  bindIp: 127.0.0.1/#  bindIp: 127.0.0.1/g' /etc/mongod.conf\\n\",\n                        \"echo 'replication:'  \u003e\u003e /etc/mongod.conf\\n\",\n                        \"echo '  replSetName: \\\"ilantus\\\"'  \u003e\u003e /etc/mongod.conf\\n\",\n                        \"systemctl restart mongod\\n\"\n                    ]\n                }\n            }\n        }\n    ]\n}",
                            "default_version": "1",
                            "description": "Launch Automation Install MongoDB with Replication",
                            "document_format": "JSON",
                            "document_type": "Automation",
                            "hash": "cab26ffed1705cae701cabf6abd042341c4b737c1f922f30e6c8163153c5a9b1",
                            "hash_type": "Sha256",
                            "id": "Launch_Automation_for_mongodb_replication_secondary",
                            "latest_version": "1",
                            "name": "Launch_Automation_for_mongodb_replication_secondary",
                            "owner": "611962639397",
                            "parameter.#": "1",
                            "parameter.0.default_value": "",
                            "parameter.0.description": "InstanceIds to run launch setup",
                            "parameter.0.name": "instanceIds",
                            "parameter.0.type": "StringList",
                            "permissions.%": "0",
                            "platform_types.#": "2",
                            "platform_types.0": "Windows",
                            "platform_types.1": "Linux",
                            "schema_version": "0.3",
                            "status": "Active",
                            "tags.%": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_ssm_document.tomcat": {
                    "type": "aws_ssm_document",
                    "depends_on": [],
                    "primary": {
                        "id": "Install_Tomcat",
                        "attributes": {
                            "arn": "arn:aws:ssm:ap-south-1:611962639397:document/Install_Tomcat",
                            "content": "  {\n      \"schemaVersion\":\"2.0\",\n      \"description\":\"Run a Shell script to securely install the Tomcat on CentOS\",\n      \"mainSteps\":[\n         {\n            \"action\":\"aws:runShellScript\",\n            \"name\":\"runShellScript\",\n            \"inputs\":{\n               \"runCommand\":[\n                   \"sudo su -\\n\",\n                   \"yum install java-1.7.0-openjdk-devel -y\\n\",\n                   \"groupadd tomcat\\n\",\n                   \"useradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat\\n\",\n                   \"cd ~\\n\",\n                   \"yum install wget vim -y\\n\",\n                   \"wget http://apache.mirrors.ionfish.org/tomcat/tomcat-8/v8.5.37/bin/apache-tomcat-8.5.37.tar.gz\\n\",\n                   \"mkdir /opt/tomcat\\n\",\n                   \"tar xvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1\\n\",\n                   \"cd /opt/tomcat\\n\",\n                   \"chgrp -R tomcat /opt/tomcat\\n\",\n                   \"chmod -R g+r conf\\n\",\n                   \"chmod g+x conf\\n\",\n                   \"chown -R tomcat webapps/ work/ temp/ logs/\\n\",\n                   \"wget https://s3.ap-south-1.amazonaws.com/app-server-ilantus/tomcat.service.txt\\n\",\n                   \"cp tomcat.service.txt /etc/systemd/system/tomcat.service\\n\",\n                   \"systemctl daemon-reload\\n\",\n                   \"systemctl start tomcat\\n\",\n                   \"systemctl enable tomcat\\n\",\n                   \"exit\"\n               ]\n            }\n         }\n      ]\n  }\n",
                            "default_version": "1",
                            "description": "Run a Shell script to securely install the Tomcat on CentOS",
                            "document_format": "JSON",
                            "document_type": "Command",
                            "hash": "dcb0d89e4dd3ed863363b08e83bd496139389025804edcc9b460603515e6f17e",
                            "hash_type": "Sha256",
                            "id": "Install_Tomcat",
                            "latest_version": "1",
                            "name": "Install_Tomcat",
                            "owner": "611962639397",
                            "parameter.#": "1",
                            "permissions.%": "0",
                            "platform_types.#": "1",
                            "platform_types.0": "Linux",
                            "schema_version": "2.0",
                            "status": "Active",
                            "tags.%": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "data.template_file.mongodb_replication_primary": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "b0fb2a4436a82a17c435a1964ad8639f86b6bcadfd09d640b76739b6977259bf",
                        "attributes": {
                            "id": "b0fb2a4436a82a17c435a1964ad8639f86b6bcadfd09d640b76739b6977259bf",
                            "rendered": "{\n    \"description\": \"Launch Automation Install MongoDB with Replication\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installdependencies\"\n        },\n        {\n            \"name\": \"installdependencies\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"cd ~\\n\",\n                        \"yum install wget vim -y\\n\",\n                        \"curl -O https://bootstrap.pypa.io/get-pip.py\\n\",\n                        \"python get-pip.py\\n\",\n                        \"pip install awscli\\n\",\n                        \"yum -y install firewalld\\n\",\n                        \"sed -i -e 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux\\n\"\n                    ]\n                }\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\",\n                        \"echo mongodb-primary \u003e /etc/hostname\\n\",\n                        \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n                        \"ipmongoprimary=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`ipmongoprimary`].Value' --output text)\\n\",\n                        \"ipmongosecondary=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`ipmongosecondary`].Value' --output text)\\n\",\n                        \"echo $ipmongoprimary mongodb-primary \u003e\u003e /etc/hosts\\n\",\n                        \"echo $ipmongosecondary mongodb-secondary \u003e\u003e /etc/hosts\\n\",\n                        \"reboot\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installmongoDB\"\n        },\n        {\n            \"name\": \"installmongoDB\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"systemctl start firewalld\\n\",\n                        \"systemctl enable firewalld\\n\",\n                        \"firewall-cmd --permanent --add-port=22/tcp\\n\",\n                        \"firewall-cmd --permanent --add-port=27017/tcp\\n\",\n                        \"firewall-cmd --reload\\n\",\n                        \"cd ~\\n\",\n                        \"yum install wget vim -y\\n\",\n                        \"wget https://s3.ap-south-1.amazonaws.com/app-server-ilantus/mongo.repo.txt\\n\",\n                        \"cp mongo.repo.txt /etc/yum.repos.d/mongodb-org.repo\\n\",\n                        \"yum repolist\\n\",\n                        \"yum install mongodb-org -y\\n\",\n                        \"systemctl start mongod\\n\",\n                        \"sed -i -e 's/  bindIp: 127.0.0.1/#  bindIp: 127.0.0.1/g' /etc/mongod.conf\\n\",\n                        \"echo 'replication:'  \u003e\u003e /etc/mongod.conf\\n\",\n                        \"echo '  replSetName: \\\"ilantus\\\"'  \u003e\u003e /etc/mongod.conf\\n\",\n                        \"systemctl restart mongod\\n\"\n                    ]\n                }\n            },\n            \"nextStep\": \"configuremongodb\"\n        }\n    ]\n}",
                            "template": "{\n    \"description\": \"Launch Automation Install MongoDB with Replication\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installdependencies\"\n        },\n        {\n            \"name\": \"installdependencies\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"cd ~\\n\",\n                        \"yum install wget vim -y\\n\",\n                        \"curl -O https://bootstrap.pypa.io/get-pip.py\\n\",\n                        \"python get-pip.py\\n\",\n                        \"pip install awscli\\n\",\n                        \"yum -y install firewalld\\n\",\n                        \"sed -i -e 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux\\n\"\n                    ]\n                }\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\",\n                        \"echo mongodb-primary \u003e /etc/hostname\\n\",\n                        \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n                        \"ipmongoprimary=$(aws ec2 describe-instances --instance-id $instanceId --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`ipmongoprimary`].Value' --output text)\\n\",\n                        \"ipmongosecondary=$(aws ec2 describe-instances --instance-id $instanceId --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`ipmongosecondary`].Value' --output text)\\n\",\n                        \"echo $ipmongoprimary mongodb-primary \u003e\u003e /etc/hosts\\n\",\n                        \"echo $ipmongosecondary mongodb-secondary \u003e\u003e /etc/hosts\\n\",\n                        \"reboot\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installmongoDB\"\n        },\n        {\n            \"name\": \"installmongoDB\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"systemctl start firewalld\\n\",\n                        \"systemctl enable firewalld\\n\",\n                        \"firewall-cmd --permanent --add-port=22/tcp\\n\",\n                        \"firewall-cmd --permanent --add-port=27017/tcp\\n\",\n                        \"firewall-cmd --reload\\n\",\n                        \"cd ~\\n\",\n                        \"yum install wget vim -y\\n\",\n                        \"wget https://s3.ap-south-1.amazonaws.com/app-server-ilantus/mongo.repo.txt\\n\",\n                        \"cp mongo.repo.txt /etc/yum.repos.d/mongodb-org.repo\\n\",\n                        \"yum repolist\\n\",\n                        \"yum install mongodb-org -y\\n\",\n                        \"systemctl start mongod\\n\",\n                        \"sed -i -e 's/  bindIp: 127.0.0.1/#  bindIp: 127.0.0.1/g' /etc/mongod.conf\\n\",\n                        \"echo 'replication:'  \u003e\u003e /etc/mongod.conf\\n\",\n                        \"echo '  replSetName: \\\"${customer}\\\"'  \u003e\u003e /etc/mongod.conf\\n\",\n                        \"systemctl restart mongod\\n\"\n                    ]\n                }\n            },\n            \"nextStep\": \"configuremongodb\"\n        }\n    ]\n}",
                            "vars.%": "2",
                            "vars.customer": "ilantus",
                            "vars.region": "ap-south-1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.mongodb_replication_secondary": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "cab26ffed1705cae701cabf6abd042341c4b737c1f922f30e6c8163153c5a9b1",
                        "attributes": {
                            "id": "cab26ffed1705cae701cabf6abd042341c4b737c1f922f30e6c8163153c5a9b1",
                            "rendered": "{\n    \"description\": \"Launch Automation Install MongoDB with Replication\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installdependencies\"\n        },\n        {\n            \"name\": \"installdependencies\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"cd ~\\n\",\n                        \"yum install wget vim -y\\n\",\n                        \"curl -O https://bootstrap.pypa.io/get-pip.py\\n\",\n                        \"python get-pip.py\\n\",\n                        \"pip install awscli\\n\",\n                        \"yum -y install firewalld\\n\",\n                        \"sed -i -e 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux\\n\"\n                    ]\n                }\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\",\n                        \"echo mongodb-secondary \u003e /etc/hostname\\n\",\n                        \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n                        \"ipmongoprimary=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`ipmongoprimary`].Value' --output text)\\n\",\n                        \"ipmongosecondary=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`ipmongosecondary`].Value' --output text)\\n\",\n                        \"echo $ipmongoprimary mongodb-primary \u003e\u003e /etc/hosts\\n\",\n                        \"echo $ipmongosecondary mongodb-secondary \u003e\u003e /etc/hosts\\n\",\n                        \"reboot\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installmongoDB\"\n        },\n        {\n            \"name\": \"installmongoDB\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"systemctl start firewalld\\n\",\n                        \"systemctl enable firewalld\\n\",\n                        \"firewall-cmd --permanent --add-port=22/tcp\\n\",\n                        \"firewall-cmd --permanent --add-port=27017/tcp\\n\",\n                        \"firewall-cmd --reload\\n\",\n                        \"cd ~\\n\",\n                        \"yum install wget vim -y\\n\",\n                        \"wget https://s3.ap-south-1.amazonaws.com/app-server-ilantus/mongo.repo.txt\\n\",\n                        \"cp mongo.repo.txt /etc/yum.repos.d/mongodb-org.repo\\n\",\n                        \"yum repolist\\n\",\n                        \"yum install mongodb-org -y\\n\",\n                        \"systemctl start mongod\\n\",\n                        \"sed -i -e 's/  bindIp: 127.0.0.1/#  bindIp: 127.0.0.1/g' /etc/mongod.conf\\n\",\n                        \"echo 'replication:'  \u003e\u003e /etc/mongod.conf\\n\",\n                        \"echo '  replSetName: \\\"ilantus\\\"'  \u003e\u003e /etc/mongod.conf\\n\",\n                        \"systemctl restart mongod\\n\"\n                    ]\n                }\n            }\n        }\n    ]\n}",
                            "template": "{\n    \"description\": \"Launch Automation Install MongoDB with Replication\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installdependencies\"\n        },\n        {\n            \"name\": \"installdependencies\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"cd ~\\n\",\n                        \"yum install wget vim -y\\n\",\n                        \"curl -O https://bootstrap.pypa.io/get-pip.py\\n\",\n                        \"python get-pip.py\\n\",\n                        \"pip install awscli\\n\",\n                        \"yum -y install firewalld\\n\",\n                        \"sed -i -e 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux\\n\"\n                    ]\n                }\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\",\n                        \"echo mongodb-secondary \u003e /etc/hostname\\n\",\n                        \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n                        \"ipmongoprimary=$(aws ec2 describe-instances --instance-id $instanceId --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`ipmongoprimary`].Value' --output text)\\n\",\n                        \"ipmongosecondary=$(aws ec2 describe-instances --instance-id $instanceId --region ${region} --query 'Reservations[0].Instances[0].Tags[?Key==`ipmongosecondary`].Value' --output text)\\n\",\n                        \"echo $ipmongoprimary mongodb-primary \u003e\u003e /etc/hosts\\n\",\n                        \"echo $ipmongosecondary mongodb-secondary \u003e\u003e /etc/hosts\\n\",\n                        \"reboot\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installmongoDB\"\n        },\n        {\n            \"name\": \"installmongoDB\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"systemctl start firewalld\\n\",\n                        \"systemctl enable firewalld\\n\",\n                        \"firewall-cmd --permanent --add-port=22/tcp\\n\",\n                        \"firewall-cmd --permanent --add-port=27017/tcp\\n\",\n                        \"firewall-cmd --reload\\n\",\n                        \"cd ~\\n\",\n                        \"yum install wget vim -y\\n\",\n                        \"wget https://s3.ap-south-1.amazonaws.com/app-server-ilantus/mongo.repo.txt\\n\",\n                        \"cp mongo.repo.txt /etc/yum.repos.d/mongodb-org.repo\\n\",\n                        \"yum repolist\\n\",\n                        \"yum install mongodb-org -y\\n\",\n                        \"systemctl start mongod\\n\",\n                        \"sed -i -e 's/  bindIp: 127.0.0.1/#  bindIp: 127.0.0.1/g' /etc/mongod.conf\\n\",\n                        \"echo 'replication:'  \u003e\u003e /etc/mongod.conf\\n\",\n                        \"echo '  replSetName: \\\"${customer}\\\"'  \u003e\u003e /etc/mongod.conf\\n\",\n                        \"systemctl restart mongod\\n\"\n                    ]\n                }\n            }\n        }\n    ]\n}",
                            "vars.%": "2",
                            "vars.customer": "ilantus",
                            "vars.region": "ap-south-1"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                }
            },
            "depends_on": []
        }
    ]
}
