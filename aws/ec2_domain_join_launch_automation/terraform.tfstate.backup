{
    "version": 3,
    "terraform_version": "0.11.10",
    "serial": 2,
    "lineage": "f1bea346-a762-16b5-33f3-608544e6c965",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {},
            "resources": {
                "aws_cloudwatch_event_rule.ec2_run_instances": {
                    "type": "aws_cloudwatch_event_rule",
                    "depends_on": [],
                    "primary": {
                        "id": "EC2-Instance-Launch-Automation",
                        "attributes": {
                            "arn": "arn:aws:events:ap-south-1:570193561522:rule/EC2-Instance-Launch-Automation",
                            "description": "Runs automation on EC2 instance launch",
                            "event_pattern": "{\"detail\":{\"eventName\":[\"RunInstances\"],\"eventSource\":[\"ec2.amazonaws.com\"]},\"detail-type\":[\"AWS API Call via CloudTrail\"],\"source\":[\"aws.ec2\"]}",
                            "id": "EC2-Instance-Launch-Automation",
                            "is_enabled": "true",
                            "name": "EC2-Instance-Launch-Automation",
                            "role_arn": "",
                            "schedule_expression": ""
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_cloudwatch_event_target.ec2_run_instances": {
                    "type": "aws_cloudwatch_event_target",
                    "depends_on": [
                        "aws_cloudwatch_event_rule.ec2_run_instances",
                        "aws_lambda_function.lambda_function"
                    ],
                    "primary": {
                        "id": "EC2-Instance-Launch-Automation-Launch-EC2-Instance-Automation",
                        "attributes": {
                            "arn": "arn:aws:lambda:ap-south-1:570193561522:function:Launch-EC2-Instance-Automation",
                            "id": "EC2-Instance-Launch-Automation-Launch-EC2-Instance-Automation",
                            "input": "",
                            "input_path": "",
                            "role_arn": "",
                            "rule": "EC2-Instance-Launch-Automation",
                            "target_id": "Launch-EC2-Instance-Automation"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_iam_policy.instance_launch_automation": {
                    "type": "aws_iam_policy",
                    "depends_on": [],
                    "primary": {
                        "id": "arn:aws:iam::570193561522:policy/Instance-Launch-Automation",
                        "attributes": {
                            "arn": "arn:aws:iam::570193561522:policy/Instance-Launch-Automation",
                            "description": "",
                            "id": "arn:aws:iam::570193561522:policy/Instance-Launch-Automation",
                            "name": "Instance-Launch-Automation",
                            "path": "/",
                            "policy": "{\n   \"Version\": \"2012-10-17\",\n   \"Statement\": [\n       {\n           \"Effect\": \"Allow\",\n           \"Action\": [\n               \"ec2:CreateTags\",\n               \"ec2:DescribeInstances\",\n               \"ec2:DescribeInstanceStatus\",\n               \"iam:PassRole\",\n               \"ssm:*\"\n           ],\n           \"Resource\": \"*\"\n       }\n   ]\n}\n"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_iam_role.instance_launch_automation": {
                    "type": "aws_iam_role",
                    "depends_on": [],
                    "primary": {
                        "id": "Instance-Launch-Automation",
                        "attributes": {
                            "arn": "arn:aws:iam::570193561522:role/Instance-Launch-Automation",
                            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"lambda.amazonaws.com\",\"ssm.amazonaws.com\"]},\"Action\":\"sts:AssumeRole\"}]}",
                            "create_date": "2018-12-04T11:18:00Z",
                            "description": "",
                            "force_detach_policies": "false",
                            "id": "Instance-Launch-Automation",
                            "max_session_duration": "3600",
                            "name": "Instance-Launch-Automation",
                            "path": "/",
                            "tags.%": "0",
                            "unique_id": "AROAIKJADRBIAX53J4RBO"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_iam_role_policy_attachment.lambda_basic_policy_attachment": {
                    "type": "aws_iam_role_policy_attachment",
                    "depends_on": [
                        "aws_iam_role.instance_launch_automation"
                    ],
                    "primary": {
                        "id": "Instance-Launch-Automation-20181204111804831300000001",
                        "attributes": {
                            "id": "Instance-Launch-Automation-20181204111804831300000001",
                            "policy_arn": "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                            "role": "Instance-Launch-Automation"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_iam_role_policy_attachment.lambda_main_policy_attachment": {
                    "type": "aws_iam_role_policy_attachment",
                    "depends_on": [
                        "aws_iam_policy.instance_launch_automation",
                        "aws_iam_role.instance_launch_automation"
                    ],
                    "primary": {
                        "id": "Instance-Launch-Automation-20181204111805835400000002",
                        "attributes": {
                            "id": "Instance-Launch-Automation-20181204111805835400000002",
                            "policy_arn": "arn:aws:iam::570193561522:policy/Instance-Launch-Automation",
                            "role": "Instance-Launch-Automation"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_lambda_function.lambda_function": {
                    "type": "aws_lambda_function",
                    "depends_on": [
                        "aws_iam_role.instance_launch_automation",
                        "aws_ssm_document.amazon_linux_automation",
                        "aws_ssm_document.centos_linux_automation",
                        "aws_ssm_document.redhat_linux_automation",
                        "aws_ssm_document.ubuntu_linux_automation",
                        "aws_ssm_document.windows2012_automation",
                        "aws_ssm_document.windows2016_automation",
                        "data.archive_file.lambda_code"
                    ],
                    "primary": {
                        "id": "Launch-EC2-Instance-Automation",
                        "attributes": {
                            "arn": "arn:aws:lambda:ap-south-1:570193561522:function:Launch-EC2-Instance-Automation",
                            "dead_letter_config.#": "0",
                            "description": "",
                            "environment.#": "1",
                            "environment.0.variables.%": "6",
                            "environment.0.variables.LAUNCH_AUTOMATION_DOCUMENT_AMAZON_LINUX": "Launch_Automation_for_AmazonLinux",
                            "environment.0.variables.LAUNCH_AUTOMATION_DOCUMENT_CENTOS_LINUX": "Launch_Automation_for_CentOSLinux",
                            "environment.0.variables.LAUNCH_AUTOMATION_DOCUMENT_REDHAT_LINUX": "Launch_Automation_for_RedHatLinux",
                            "environment.0.variables.LAUNCH_AUTOMATION_DOCUMENT_UBUNTU_LINUX": "Launch_Automation_for_UbuntuLinux",
                            "environment.0.variables.LAUNCH_AUTOMATION_DOCUMENT_WINDOWS_2012": "Launch_Automation_for_Windows2012",
                            "environment.0.variables.LAUNCH_AUTOMATION_DOCUMENT_WINDOWS_2016": "Launch_Automation_for_Windows2016",
                            "filename": "lambda.zip",
                            "function_name": "Launch-EC2-Instance-Automation",
                            "handler": "lambda.handler",
                            "id": "Launch-EC2-Instance-Automation",
                            "invoke_arn": "arn:aws:apigateway:ap-south-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-south-1:570193561522:function:Launch-EC2-Instance-Automation/invocations",
                            "kms_key_arn": "",
                            "last_modified": "2018-12-04T11:18:14.636+0000",
                            "memory_size": "128",
                            "publish": "false",
                            "qualified_arn": "arn:aws:lambda:ap-south-1:570193561522:function:Launch-EC2-Instance-Automation:$LATEST",
                            "reserved_concurrent_executions": "0",
                            "role": "arn:aws:iam::570193561522:role/Instance-Launch-Automation",
                            "runtime": "nodejs8.10",
                            "source_code_hash": "YkVSq7PuOaiO0/C5gEAhDpyN6LdlzAUgzh8LGwOLQfE=",
                            "source_code_size": "1118",
                            "tags.%": "0",
                            "timeout": "300",
                            "tracing_config.#": "1",
                            "tracing_config.0.mode": "PassThrough",
                            "version": "$LATEST",
                            "vpc_config.#": "0"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "create": 600000000000
                            }
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_lambda_permission.allow_cloudwatch": {
                    "type": "aws_lambda_permission",
                    "depends_on": [
                        "aws_cloudwatch_event_rule.ec2_run_instances",
                        "aws_lambda_function.lambda_function"
                    ],
                    "primary": {
                        "id": "AllowExecutionFromCloudWatch",
                        "attributes": {
                            "action": "lambda:InvokeFunction",
                            "function_name": "Launch-EC2-Instance-Automation",
                            "id": "AllowExecutionFromCloudWatch",
                            "principal": "events.amazonaws.com",
                            "qualifier": "",
                            "source_arn": "arn:aws:events:ap-south-1:570193561522:rule/EC2-Instance-Launch-Automation",
                            "statement_id": "AllowExecutionFromCloudWatch"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_ssm_document.amazon_linux_automation": {
                    "type": "aws_ssm_document",
                    "depends_on": [
                        "data.template_file.amazon_linux_automation"
                    ],
                    "primary": {
                        "id": "Launch_Automation_for_AmazonLinux",
                        "attributes": {
                            "arn": "arn:aws:ssm:ap-south-1:570193561522:document/Launch_Automation_for_AmazonLinux",
                            "content": "{\n    \"description\": \"Launch Automation for Amazon Linux instance\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installdependencies\"\n        },\n        {\n            \"name\": \"installdependencies\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"yum update -y\\n\",\n                        \"curl -O https://bootstrap.pypa.io/get-pip.py\\n\",\n                        \"python get-pip.py\\n\",\n                        \"pip install awscli\\n\",\n                        \"yum install sssd realmd oddjob oddjob-mkhomedir samba-common samba-common-tools krb5-workstation openldap-clients policycoreutils-python -y\\n\",\n                        \"echo Packages are installed\"\n                    ]\n                }\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\",\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"if realm list |grep $domain; then echo \\\"Host has already joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n                        \"hostname=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`hostname`].Value' --output text)\\n\",\n                        \"if [ -z \\\"$hostname\\\" ]; then echo \\\"hostname (case sensitive) tag is not defined so exiting\\\"; exit -1; fi\\n\",\n                        \"echo $hostname.$domain \u003e /etc/hostname\\n\",\n                        \"echo 127.0.0.1 $hostname.$domain $hostname \u003e /etc/hosts\\n\",\n                        \"echo \\\"Hostname has changed and rebooting now\\\"\\n\",\n                        \"reboot\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"joinDomain\"\n        },\n        {\n            \"name\": \"joinDomain\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"ouPath=$(aws ssm get-parameters --names /domain/ou_path --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"username=$(aws ssm get-parameters --names /domain/username --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"password=$(aws ssm get-parameters --names /domain/password --with-decryption --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"for i in 1 2 3 4 5;\\n\",\n                        \"do\\n\",\n                        \"echo $password | sudo realm join --membership-software=samba -U $username --computer-ou=$ouPath $domain \u0026\u0026 echo \\\"Host has joined domain successfully after $i retries\\\" \u0026\u0026 break;\\n\",\n                        \"done\\n\",\n                        \"if ! sudo realm list |grep $domain; then echo \\\"Host has not joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"sudo shutdown -r 1\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterDomainJoin\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"modifySSSD\"\n        },\n        {\n            \"name\": \"modifySSSD\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"domain=`realm list|head -1`\\n\",\n                        \"cp /etc/sssd/sssd.conf /etc/sssd/sssd.conf.backup\\n\",\n                        \"echo dyndns_update = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_refresh_interval = 43200 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_update_ptr = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_ttl = 3600 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo Updated sssd.conf, now restarting sssd service\\n\",\n                        \"/bin/systemctl restart sssd.service\\n\",\n                        \"cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup\\n\",\n                        \"sed -i -e 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\\n\",\n                        \"echo Updated sshd_config, now restarting sshd service\\n\",\n                        \"/bin/systemctl restart sshd.service\\n\",\n                        \"echo \\\"CIOCloudmanagement@$domain ALL=(ALL) ALL\\\" \u003e\u003e /etc/sudoers.d/CIOCloudmanagement\"\n                    ]\n                }\n            }\n        }\n    ]\n}",
                            "default_version": "1",
                            "description": "Launch Automation for Amazon Linux instance",
                            "document_format": "JSON",
                            "document_type": "Automation",
                            "hash": "72bf08e8aec68f7979565436f19d050ac1e5d65116dbcf662831b7f806d1c56b",
                            "hash_type": "Sha256",
                            "id": "Launch_Automation_for_AmazonLinux",
                            "latest_version": "1",
                            "name": "Launch_Automation_for_AmazonLinux",
                            "owner": "570193561522",
                            "parameter.#": "1",
                            "parameter.0.default_value": "",
                            "parameter.0.description": "InstanceIds to run launch setup",
                            "parameter.0.name": "instanceIds",
                            "parameter.0.type": "StringList",
                            "permissions.%": "0",
                            "platform_types.#": "2",
                            "platform_types.0": "Windows",
                            "platform_types.1": "Linux",
                            "schema_version": "0.3",
                            "status": "Active",
                            "tags.%": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_ssm_document.centos_linux_automation": {
                    "type": "aws_ssm_document",
                    "depends_on": [
                        "data.template_file.centos_linux_automation"
                    ],
                    "primary": {
                        "id": "Launch_Automation_for_CentOSLinux",
                        "attributes": {
                            "arn": "arn:aws:ssm:ap-south-1:570193561522:document/Launch_Automation_for_CentOSLinux",
                            "content": "{\n    \"description\": \"Launch Automation for CentOS Linux instance\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installdependencies\"\n        },\n        {\n            \"name\": \"installdependencies\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"yum update -y\\n\",\n                        \"curl -O https://bootstrap.pypa.io/get-pip.py\\n\",\n                        \"python get-pip.py\\n\",\n                        \"pip install awscli\\n\",\n                        \"sudo yum install sssd realmd oddjob oddjob-mkhomedir adcli krb5-workstation openldap-clients policycoreutils-python -y\\n\",\n                        \"echo Packages are installed\"\n                    ]\n                }\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\",\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"if realm list |grep $domain; then echo \\\"Host has already joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n                        \"hostname=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`hostname`].Value' --output text)\\n\",\n                        \"if [ -z \\\"$hostname\\\" ]; then echo \\\"hostname (case sensitive) tag is not defined so exiting\\\"; exit -1; fi\\n\",\n                        \"echo $hostname.$domain \u003e /etc/hostname\\n\",\n                        \"echo 127.0.0.1 $hostname.$domain $hostname \u003e /etc/hosts\\n\",\n                        \"echo \\\"Hostname has changed and rebooting now\\\"\\n\",\n                        \"reboot\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"joinDomain\"\n        },\n        {\n            \"name\": \"joinDomain\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"ouPath=$(aws ssm get-parameters --names /domain/ou_path --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"username=$(aws ssm get-parameters --names /domain/username --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"password=$(aws ssm get-parameters --names /domain/password --with-decryption --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"for i in 1 2 3 4 5;\\n\",\n                        \"do\\n\",\n                        \"echo $password | sudo realm join --membership-software=adcli -U $username --computer-ou=$ouPath $domain \u0026\u0026 echo \\\"Host has joined domain successfully after $i retries\\\" \u0026\u0026 break;\\n\",\n                        \"done\\n\",\n                        \"if ! sudo realm list |grep $domain; then echo \\\"Host has not joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"sudo shutdown -r 1\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterDomainJoin\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"modifySSSD\"\n        },\n        {\n            \"name\": \"modifySSSD\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"domain=`realm list|head -1`\\n\",\n                        \"cp /etc/sssd/sssd.conf /etc/sssd/sssd.conf.backup\\n\",\n                        \"echo dyndns_update = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_refresh_interval = 43200 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_update_ptr = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_ttl = 3600 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo Updated sssd.conf, now restarting sssd service\\n\",\n                        \"/bin/systemctl restart sssd.service\\n\",\n                        \"cp /etc/ssh/sshd_config  /etc/ssh/sshd_config.backup\\n\",\n                        \"sed -i -e 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\\n\",\n                        \"echo Updated sshd_config, now restarting sshd service\\n\",\n                        \"/bin/systemctl restart sshd.service\\n\",\n                        \"echo \\\"CIOCloudmanagement@$domain ALL=(ALL) ALL\\\" \u003e\u003e /etc/sudoers.d/CIOCloudmanagement\"\n                    ]\n                }\n            }\n        }\n    ]\n}",
                            "default_version": "1",
                            "description": "Launch Automation for CentOS Linux instance",
                            "document_format": "JSON",
                            "document_type": "Automation",
                            "hash": "7f3166d53a9bdab064546ceafbcad2633a1fc0dd9b337558175ba012b7c690b4",
                            "hash_type": "Sha256",
                            "id": "Launch_Automation_for_CentOSLinux",
                            "latest_version": "1",
                            "name": "Launch_Automation_for_CentOSLinux",
                            "owner": "570193561522",
                            "parameter.#": "1",
                            "parameter.0.default_value": "",
                            "parameter.0.description": "InstanceIds to run launch setup",
                            "parameter.0.name": "instanceIds",
                            "parameter.0.type": "StringList",
                            "permissions.%": "0",
                            "platform_types.#": "2",
                            "platform_types.0": "Windows",
                            "platform_types.1": "Linux",
                            "schema_version": "0.3",
                            "status": "Active",
                            "tags.%": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_ssm_document.ec2_launch_automation": {
                    "type": "aws_ssm_document",
                    "depends_on": [],
                    "primary": {
                        "id": "Launch_Automation_for_Any_OS",
                        "attributes": {
                            "arn": "arn:aws:ssm:ap-south-1:570193561522:document/Launch_Automation_for_Any_OS",
                            "content": "{\n    \"schemaVersion\": \"0.3\",\n    \"description\": \"EC2 launch automation for any type of OS\",\n    \"parameters\": {\n        \"InstanceId\": {\n            \"type\": \"String\",\n            \"description\": \"Golden image server InstanceId\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"describeInstance\",\n            \"action\": \"aws:executeAwsApi\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"Service\": \"ssm\",\n                \"Api\": \"DescribeInstanceInformation\",\n                \"Filters\": [{\n                    \"Key\": \"InstanceIds\",\n                    \"Values\": [\"{{InstanceId}}\"]\n                }]\n            },\n            \"outputs\": [{\n                \"Name\": \"osType\",\n                \"Selector\": \"$.InstanceInformationList[0].PlatformName\",\n                \"Type\": \"String\"\n            }],\n            \"nextStep\": \"chooseAutomationDocument\"\n        },\n        {\n            \"name\": \"chooseAutomationDocument\",\n            \"action\": \"aws:branch\",\n            \"inputs\": {\n                \"Choices\": [{\n                        \"NextStep\": \"executeForWindows2012\",\n                        \"Variable\": \"{{describeInstance.osType}}\",\n                        \"Contains\": \"Windows Server 2012\"\n                    },\n                    {\n                        \"NextStep\": \"executeForWindows2016\",\n                        \"Variable\": \"{{describeInstance.osType}}\",\n                        \"Contains\": \"Windows Server 2016\"\n                    },\n                    {\n                        \"NextStep\": \"executeForRedHat\",\n                        \"Variable\": \"{{describeInstance.osType}}\",\n                        \"Contains\": \"Red Hat\"\n                    },\n                    {\n                        \"NextStep\": \"executeForUbuntu\",\n                        \"Variable\": \"{{describeInstance.osType}}\",\n                        \"Contains\": \"Ubuntu\"\n                    },\n                    {\n                        \"NextStep\": \"executeForCentOS\",\n                        \"Variable\": \"{{describeInstance.osType}}\",\n                        \"Contains\": \"CentOS\"\n                    },\n                    {\n                        \"NextStep\": \"executeForAmazonLinux\",\n                        \"Variable\": \"{{describeInstance.osType}}\",\n                        \"Contains\": \"Amazon Linux\"\n                    }\n                ],\n                \"Default\": \"executeForAmazonLinux\"\n            }\n        },\n        {\n            \"name\": \"executeForAmazonLinux\",\n            \"action\": \"aws:executeAutomation\",\n            \"maxAttempts\": 3,\n            \"timeoutSeconds\": 3600,\n            \"isEnd\": true,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"Launch_Automation_for_AmazonLinux\",\n                \"RuntimeParameters\": {\n                    \"instanceIds\": [\n                        \"{{InstanceId}}\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"executeForCentOS\",\n            \"action\": \"aws:executeAutomation\",\n            \"maxAttempts\": 3,\n            \"timeoutSeconds\": 3600,\n            \"isEnd\": true,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"Launch_Automation_for_CentOSLinux\",\n                \"RuntimeParameters\": {\n                    \"instanceIds\": [\n                        \"{{InstanceId}}\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"executeForRedHat\",\n            \"action\": \"aws:executeAutomation\",\n            \"maxAttempts\": 3,\n            \"timeoutSeconds\": 3600,\n            \"isEnd\": true,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"Launch_Automation_for_RedHatLinux\",\n                \"RuntimeParameters\": {\n                    \"instanceIds\": [\n                        \"{{InstanceId}}\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"executeForUbuntu\",\n            \"action\": \"aws:executeAutomation\",\n            \"maxAttempts\": 3,\n            \"timeoutSeconds\": 3600,\n            \"isEnd\": true,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"Launch_Automation_for_UbuntuLinux\",\n                \"RuntimeParameters\": {\n                    \"instanceIds\": [\n                        \"{{InstanceId}}\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"executeForWindows2012\",\n            \"action\": \"aws:executeAutomation\",\n            \"maxAttempts\": 3,\n            \"timeoutSeconds\": 3600,\n            \"isEnd\": true,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"Launch_Automation_for_Windows2012\",\n                \"RuntimeParameters\": {\n                    \"instanceIds\": [\n                        \"{{InstanceId}}\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"executeForWindows2016\",\n            \"action\": \"aws:executeAutomation\",\n            \"maxAttempts\": 3,\n            \"timeoutSeconds\": 3600,\n            \"isEnd\": true,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"Launch_Automation_for_Windows2016\",\n                \"RuntimeParameters\": {\n                    \"instanceIds\": [\n                        \"{{InstanceId}}\"\n                    ]\n                }\n            }\n        }\n    ]\n}",
                            "default_version": "1",
                            "description": "EC2 launch automation for any type of OS",
                            "document_format": "JSON",
                            "document_type": "Automation",
                            "hash": "25e4e647c4c25ea8dc1eaace587864cce97975a56b49b34ab7c8bbaac2ed9891",
                            "hash_type": "Sha256",
                            "id": "Launch_Automation_for_Any_OS",
                            "latest_version": "1",
                            "name": "Launch_Automation_for_Any_OS",
                            "owner": "570193561522",
                            "parameter.#": "1",
                            "parameter.0.default_value": "",
                            "parameter.0.description": "Golden image server InstanceId",
                            "parameter.0.name": "InstanceId",
                            "parameter.0.type": "String",
                            "permissions.%": "0",
                            "platform_types.#": "2",
                            "platform_types.0": "Windows",
                            "platform_types.1": "Linux",
                            "schema_version": "0.3",
                            "status": "Active",
                            "tags.%": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_ssm_document.redhat_linux_automation": {
                    "type": "aws_ssm_document",
                    "depends_on": [
                        "data.template_file.redhat_linux_automation"
                    ],
                    "primary": {
                        "id": "Launch_Automation_for_RedHatLinux",
                        "attributes": {
                            "arn": "arn:aws:ssm:ap-south-1:570193561522:document/Launch_Automation_for_RedHatLinux",
                            "content": "{\n    \"description\": \"Launch Automation for RedHat Linux instance\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"installdependencies\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"yum update -y\\n\",\n                        \"curl -O https://bootstrap.pypa.io/get-pip.py\\n\",\n                        \"python get-pip.py\\n\",\n                        \"pip install awscli\\n\",\n                        \"sudo yum install sssd realmd oddjob oddjob-mkhomedir adcli krb5-workstation openldap-clients policycoreutils-python -y\\n\",\n                        \"echo Packages are installed\"\n                    ]\n                }\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\",\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"if realm list |grep $domain; then echo \\\"Host has already joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n                        \"hostname=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`hostname`].Value' --output text)\\n\",\n                        \"if [ -z \\\"$hostname\\\" ]; then echo \\\"hostname (case sensitive) tag is not defined so exiting\\\"; exit -1; fi\\n\",\n                        \"echo $hostname.$domain \u003e /etc/hostname\\n\",\n                        \"echo 127.0.0.1 $hostname.$domain $hostname \u003e /etc/hosts\\n\",\n                        \"echo \\\"Hostname has changed and rebooting now\\\"\\n\",\n                        \"reboot\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"joinDomain\"\n        },\n        {\n            \"name\": \"joinDomain\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"ouPath=$(aws ssm get-parameters --names /domain/ou_path --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"username=$(aws ssm get-parameters --names /domain/username --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"password=$(aws ssm get-parameters --names /domain/password --with-decryption --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"for i in 1 2 3 4 5;\\n\",\n                        \"do\\n\",\n                        \"echo $password | sudo realm join --membership-software=adcli -U $username --computer-ou=$ouPath $domain \u0026\u0026 echo \\\"Host has joined domain successfully after $i retries\\\" \u0026\u0026 break;\\n\",\n                        \"done\\n\",\n                        \"if ! sudo realm list |grep $domain; then echo \\\"Host has not joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"sudo shutdown -r 1\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterDomainJoin\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"modifySSSD\"\n        },\n        {\n            \"name\": \"modifySSSD\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"domain=`realm list|head -1`\\n\",\n                        \"cp /etc/sssd/sssd.conf /etc/sssd/sssd.conf.backup\\n\",\n                        \"echo dyndns_update = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_refresh_interval = 43200 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_update_ptr = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_ttl = 3600 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo Updated sssd.conf, now restarting sssd service\\n\",\n                        \"/bin/systemctl restart sssd.service\\n\",\n                        \"cp /etc/ssh/sshd_config  /etc/ssh/sshd_config.backup\\n\",\n                        \"sed -i -e 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\\n\",\n                        \"echo Updated sshd_config, now restarting sshd service\\n\",\n                        \"/bin/systemctl restart sshd.service\\n\",\n                        \"echo \\\"CIOCloudmanagement@$domain ALL=(ALL) ALL\\\" \u003e\u003e /etc/sudoers.d/CIOCloudmanagement\"\n                    ]\n                }\n            }\n        }\n    ]\n}",
                            "default_version": "1",
                            "description": "Launch Automation for RedHat Linux instance",
                            "document_format": "JSON",
                            "document_type": "Automation",
                            "hash": "760799812765d1ef184ce584bbf552106d51ec84085a4ca22b7b46599b0671ad",
                            "hash_type": "Sha256",
                            "id": "Launch_Automation_for_RedHatLinux",
                            "latest_version": "1",
                            "name": "Launch_Automation_for_RedHatLinux",
                            "owner": "570193561522",
                            "parameter.#": "1",
                            "parameter.0.default_value": "",
                            "parameter.0.description": "InstanceIds to run launch setup",
                            "parameter.0.name": "instanceIds",
                            "parameter.0.type": "StringList",
                            "permissions.%": "0",
                            "platform_types.#": "2",
                            "platform_types.0": "Windows",
                            "platform_types.1": "Linux",
                            "schema_version": "0.3",
                            "status": "Active",
                            "tags.%": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_ssm_document.ubuntu_linux_automation": {
                    "type": "aws_ssm_document",
                    "depends_on": [
                        "data.template_file.ubuntu_linux_automation"
                    ],
                    "primary": {
                        "id": "Launch_Automation_for_UbuntuLinux",
                        "attributes": {
                            "arn": "arn:aws:ssm:ap-south-1:570193561522:document/Launch_Automation_for_UbuntuLinux",
                            "content": "{\n    \"description\": \"Launch Automation for Ubuntu Linux instance\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installdependencies\"\n        },\n        {\n            \"name\": \"installdependencies\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"apt-get update -y\\n\",\n                        \"curl -O https://bootstrap.pypa.io/get-pip.py\\n\",\n                        \"python get-pip.py\\n\",\n                        \"pip install awscli\\n\",\n                        \"apt-get install sssd realmd krb5-user packagekit oddjob oddjob-mkhomedir samba-common samba-common-tools krb5-workstation openldap-clients policycoreutils-python -y\\n\",\n                        \"echo Packages are installed\"\n                    ]\n                }\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\",\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"if realm list |grep $domain; then echo \\\"Host has already joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n                        \"hostname=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`hostname`].Value' --output text)\\n\",\n                        \"ipv4=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\\n\",\n                        \"if [ -z \\\"$hostname\\\" ]; then echo \\\"hostname (case sensitive) tag is not defined so exiting\\\"; exit -1; fi\\n\",\n                        \"echo $hostname.$domain \u003e /etc/hostname\\n\",\n                        \"echo 127.0.0.1 $hostname.$domain \u003e /etc/hosts\\n\",\n                        \"echo \\\"$ipv4 $hostname\\\" \u003e\u003e /etc/hosts\\n\",\n                        \"echo \\\"Hostname has changed and rebooting now\\\"\\n\",\n                        \"reboot\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"joinDomain\"\n        },\n        {\n            \"name\": \"joinDomain\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"ouPath=$(aws ssm get-parameters --names /domain/ou_path --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"username=$(aws ssm get-parameters --names /domain/username --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"password=$(aws ssm get-parameters --names /domain/password --with-decryption --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"for i in 1 2 3 4 5;\\n\",\n                        \"do\\n\",\n                        \"echo $password | sudo realm join --membership-software=samba -U $username --computer-ou=$ouPath $domain \u0026\u0026 echo \\\"Host has joined domain successfully after $i retries\\\" \u0026\u0026 break;\\n\",\n                        \"done\\n\",\n                        \"if ! sudo realm list |grep $domain; then echo \\\"Host has not joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"sudo shutdown -r 1\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterDomainJoin\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"modifySSSD\"\n        },\n        {\n            \"name\": \"modifySSSD\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"domain=`realm list|head -1`\\n\",\n                        \"cp /etc/sssd/sssd.conf /etc/sssd/sssd.conf.backup\\n\",\n                        \"echo dyndns_update = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_refresh_interval = 43200 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_update_ptr = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_ttl = 3600 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo Updated sssd.conf, now restarting sssd service\\n\",\n                        \"/bin/systemctl restart sssd.service\\n\",\n                        \"cp /etc/ssh/sshd_config  /etc/ssh/sshd_config.backup\\n\",\n                        \"sed -i -e 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\\n\",\n                        \"echo Updated sshd_config, now restarting sshd service\\n\",\n                        \"/bin/systemctl restart sshd.service\\n\",\n                        \"echo \\\"CIOCloudmanagement@$domain ALL=(ALL) ALL\\\" \u003e\u003e /etc/sudoers.d/CIOCloudmanagement\"\n                    ]\n                }\n            }\n        }\n    ]\n}",
                            "default_version": "1",
                            "description": "Launch Automation for Ubuntu Linux instance",
                            "document_format": "JSON",
                            "document_type": "Automation",
                            "hash": "eb7c74dce15b45418b77b717d4c4c3b7ed5cf30d300f93404ff5372b780d6b32",
                            "hash_type": "Sha256",
                            "id": "Launch_Automation_for_UbuntuLinux",
                            "latest_version": "1",
                            "name": "Launch_Automation_for_UbuntuLinux",
                            "owner": "570193561522",
                            "parameter.#": "1",
                            "parameter.0.default_value": "",
                            "parameter.0.description": "InstanceIds to run launch setup",
                            "parameter.0.name": "instanceIds",
                            "parameter.0.type": "StringList",
                            "permissions.%": "0",
                            "platform_types.#": "2",
                            "platform_types.0": "Windows",
                            "platform_types.1": "Linux",
                            "schema_version": "0.3",
                            "status": "Active",
                            "tags.%": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_ssm_document.windows2012_automation": {
                    "type": "aws_ssm_document",
                    "depends_on": [],
                    "primary": {
                        "id": "Launch_Automation_for_Windows2012",
                        "attributes": {
                            "arn": "arn:aws:ssm:ap-south-1:570193561522:document/Launch_Automation_for_Windows2012",
                            "content": "{\n    \"description\": \"Launch Automation for Windows 2012 instance\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installAWSCLI\"\n        },\n        {\n            \"name\": \"installAWSCLI\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"timeoutSeconds\": 600,\n            \"inputs\": {\n                \"DocumentName\": \"Install_AWSCLI_windows\",\n                \"InstanceIds\": [\"{{instanceIds}}\"]\n            },\n            \"nextStep\": \"waitForInstancesToRebootAfterCLI\"\n        },\n        {\n            \"name\": \"waitForInstancesToRebootAfterCLI\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"timeoutSeconds\": 600,\n            \"maxAttempts\": 3,\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunPowerShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"$currentHostname = hostname\\n\",\n                        \"$instanceId = ((Invoke-WebRequest -Uri http://169.254.169.254/latest/meta-data/instance-id -UseBasicParsing).Content)\\n\",\n                        \"$newHostname = (aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`hostname`].Value' --output text)\\n\",\n                        \"if (!$newHostname) {echo 'hostname (case sensitive) tag is missing on the instance'; exit -1;}\\n\",\n                        \"Rename-computer –computername \\\"$currentHostname\\\" –newname \\\"$newHostname\\\"\\n\",\n                        \"Restart-Computer -Force\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"joinDomain\"\n        },\n        {\n            \"name\": \"joinDomain\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"timeoutSeconds\": 900,\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunPowerShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"$ipdns = (Get-SSMParameterValue -Name /domain/dns_ip).Parameters[0].Value\\n\",\n                        \"$domain = (Get-SSMParameterValue -Name /domain/name).Parameters[0].Value\\n\",\n                        \"$ouPath = (Get-SSMParameterValue -Name /domain/ou_path).Parameters[0].Value\\n\",\n                        \"$username = (Get-SSMParameterValue -Name /domain/username).Parameters[0].Value\\n\",\n                        \"$domain_username = \\\"$domain\\\\$username\\\"\\n\",\n                        \"$password = (Get-SSMParameterValue -Name /domain/password -WithDecryption $True).Parameters[0].Value | ConvertTo-SecureString -asPlainText -Force\\n\",\n                        \"$credential = New-Object System.Management.Automation.PSCredential($domain_username,$password)\\n\",\n                        \"Set-DnsClientServerAddress \\\"Ethernet 2\\\" -ServerAddresses ($ipdns)\\n\",\n                        \"Add-Computer -DomainName $domain -OUPath \\\"$ouPath\\\" -Credential $credential\\n\",\n                        \"Restart-Computer -Force\"\n                    ]\n                }\n            }\n        }\n    ]\n}",
                            "default_version": "1",
                            "description": "Launch Automation for Windows 2012 instance",
                            "document_format": "JSON",
                            "document_type": "Automation",
                            "hash": "cb2ea8f25e50f6c5f236751cea5ee843d4bedfe78b9d06e3458ea24add306a93",
                            "hash_type": "Sha256",
                            "id": "Launch_Automation_for_Windows2012",
                            "latest_version": "1",
                            "name": "Launch_Automation_for_Windows2012",
                            "owner": "570193561522",
                            "parameter.#": "1",
                            "parameter.0.default_value": "",
                            "parameter.0.description": "InstanceIds to run launch setup",
                            "parameter.0.name": "instanceIds",
                            "parameter.0.type": "StringList",
                            "permissions.%": "0",
                            "platform_types.#": "2",
                            "platform_types.0": "Windows",
                            "platform_types.1": "Linux",
                            "schema_version": "0.3",
                            "status": "Active",
                            "tags.%": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_ssm_document.windows2016_automation": {
                    "type": "aws_ssm_document",
                    "depends_on": [],
                    "primary": {
                        "id": "Launch_Automation_for_Windows2016",
                        "attributes": {
                            "arn": "arn:aws:ssm:ap-south-1:570193561522:document/Launch_Automation_for_Windows2016",
                            "content": "{\n    \"description\": \"Launch Automation for Windows 2016 instance\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installAWSCLI\"\n        },\n        {\n            \"name\": \"installAWSCLI\",\n            \"action\": \"aws:runCommand\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"Install_AWSCLI_windows\",\n                \"InstanceIds\": [\"{{instanceIds}}\"]\n            },\n            \"nextStep\": \"waitForInstancesToRebootAfterCLI\"\n        },\n        {\n            \"name\": \"waitForInstancesToRebootAfterCLI\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"timeoutSeconds\": 600,\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunPowerShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"$currentHostname = hostname\\n\",\n                        \"$instanceId = ((Invoke-WebRequest -Uri http://169.254.169.254/latest/meta-data/instance-id -UseBasicParsing).Content)\\n\",\n                        \"$newHostname = (aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`hostname`].Value' --output text)\\n\",\n                        \"if (!$newHostname) {echo 'hostname (case sensitive) tag is missing on the instance'; exit -1;}\\n\",\n                        \"Rename-computer –computername \\\"$currentHostname\\\" –newname \\\"$newHostname\\\"\\n\",\n                        \"Restart-Computer -Force\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"joinDomain\"\n        },\n        {\n            \"name\": \"joinDomain\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"timeoutSeconds\": 600,\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunPowerShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"$ipdns = (Get-SSMParameterValue -Name /domain/dns_ip).Parameters[0].Value\\n\",\n                        \"$domain = (Get-SSMParameterValue -Name /domain/name).Parameters[0].Value\\n\",\n                        \"$ouPath = (Get-SSMParameterValue -Name /domain/ou_path).Parameters[0].Value\\n\",\n                        \"$username = (Get-SSMParameterValue -Name /domain/username).Parameters[0].Value\\n\",\n                        \"$domain_username = \\\"$domain\\\\$username\\\"\\n\",\n                        \"echo $domain_username\\n\",\n                        \"$password = (Get-SSMParameterValue -Name /domain/password -WithDecryption $True).Parameters[0].Value | ConvertTo-SecureString -asPlainText -Force\\n\",\n                        \"$credential = New-Object System.Management.Automation.PSCredential($domain_username,$password)\\n\",\n                        \"Set-DnsClientServerAddress \\\"Ethernet\\\" -ServerAddresses $ipdns\\n\",\n                        \"Add-Computer -DomainName $domain -OUPath \\\"$ouPath\\\" -Credential $credential\\n\",\n                        \"Restart-Computer -Force\"\n                    ]\n                }\n            }\n        }\n    ]\n}",
                            "default_version": "1",
                            "description": "Launch Automation for Windows 2016 instance",
                            "document_format": "JSON",
                            "document_type": "Automation",
                            "hash": "26ee958c404b997e6b1e1a050785ff652f1f853dbb2e9a332782e0a4722a8049",
                            "hash_type": "Sha256",
                            "id": "Launch_Automation_for_Windows2016",
                            "latest_version": "1",
                            "name": "Launch_Automation_for_Windows2016",
                            "owner": "570193561522",
                            "parameter.#": "1",
                            "parameter.0.default_value": "",
                            "parameter.0.description": "InstanceIds to run launch setup",
                            "parameter.0.name": "instanceIds",
                            "parameter.0.type": "StringList",
                            "permissions.%": "0",
                            "platform_types.#": "2",
                            "platform_types.0": "Windows",
                            "platform_types.1": "Linux",
                            "schema_version": "0.3",
                            "status": "Active",
                            "tags.%": "0"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_ssm_parameter.domain_name": {
                    "type": "aws_ssm_parameter",
                    "depends_on": [],
                    "primary": {
                        "id": "/domain/name",
                        "attributes": {
                            "allowed_pattern": "",
                            "arn": "arn:aws:ssm:ap-south-1:570193561522:parameter/domain/name",
                            "description": "Domain name",
                            "id": "/domain/name",
                            "key_id": "",
                            "name": "/domain/name",
                            "overwrite": "true",
                            "tags.%": "0",
                            "type": "String",
                            "value": "corp.mphasis.com"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_ssm_parameter.domain_ou_path": {
                    "type": "aws_ssm_parameter",
                    "depends_on": [],
                    "primary": {
                        "id": "/domain/ou_path",
                        "attributes": {
                            "allowed_pattern": "",
                            "arn": "arn:aws:ssm:ap-south-1:570193561522:parameter/domain/ou_path",
                            "description": "Domain OU path",
                            "id": "/domain/ou_path",
                            "key_id": "",
                            "name": "/domain/ou_path",
                            "overwrite": "true",
                            "tags.%": "0",
                            "type": "String",
                            "value": "OU=AWS_Cloud_Servers,OU=Cloud_Servers,DC=corp,DC=mphasis,DC=com"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_ssm_parameter.domain_password": {
                    "type": "aws_ssm_parameter",
                    "depends_on": [
                        "data.aws_kms_key.ssm"
                    ],
                    "primary": {
                        "id": "/domain/password",
                        "attributes": {
                            "allowed_pattern": "",
                            "arn": "arn:aws:ssm:ap-south-1:570193561522:parameter/domain/password",
                            "description": "Domain password",
                            "id": "/domain/password",
                            "key_id": "arn:aws:kms:ap-south-1:570193561522:key/f501007d-4e2f-4474-a224-648df3141fc5",
                            "name": "/domain/password",
                            "overwrite": "true",
                            "tags.%": "0",
                            "type": "SecureString",
                            "value": "Eighty@2E"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_ssm_parameter.domain_username": {
                    "type": "aws_ssm_parameter",
                    "depends_on": [],
                    "primary": {
                        "id": "/domain/username",
                        "attributes": {
                            "allowed_pattern": "",
                            "arn": "arn:aws:ssm:ap-south-1:570193561522:parameter/domain/username",
                            "description": "Domain username",
                            "id": "/domain/username",
                            "key_id": "",
                            "name": "/domain/username",
                            "overwrite": "true",
                            "tags.%": "0",
                            "type": "String",
                            "value": "anirudh.tensult"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_ssm_parameter.ipdns": {
                    "type": "aws_ssm_parameter",
                    "depends_on": [],
                    "primary": {
                        "id": "/domain/dns_ip",
                        "attributes": {
                            "allowed_pattern": "",
                            "arn": "arn:aws:ssm:ap-south-1:570193561522:parameter/domain/dns_ip",
                            "description": "DNS IP Address",
                            "id": "/domain/dns_ip",
                            "key_id": "",
                            "name": "/domain/dns_ip",
                            "overwrite": "true",
                            "tags.%": "0",
                            "type": "String",
                            "value": "172.20.7.31,172.20.7.30"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_vpc_dhcp_options.ad": {
                    "type": "aws_vpc_dhcp_options",
                    "depends_on": [],
                    "primary": {
                        "id": "dopt-042ce863fe6a912bd",
                        "attributes": {
                            "domain_name": "corp.mphasis.com",
                            "domain_name_servers.#": "3",
                            "domain_name_servers.0": "172.20.7.31",
                            "domain_name_servers.1": "172.20.7.30",
                            "domain_name_servers.2": "AmazonProvidedDNS",
                            "id": "dopt-042ce863fe6a912bd",
                            "tags.%": "1",
                            "tags.Name": "ActiveDirectory"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_vpc_dhcp_options_association.ad": {
                    "type": "aws_vpc_dhcp_options_association",
                    "depends_on": [
                        "aws_vpc_dhcp_options.ad"
                    ],
                    "primary": {
                        "id": "dopt-042ce863fe6a912bd-vpc-06d461a68868ed907",
                        "attributes": {
                            "dhcp_options_id": "dopt-042ce863fe6a912bd",
                            "id": "dopt-042ce863fe6a912bd-vpc-06d461a68868ed907",
                            "vpc_id": "vpc-06d461a68868ed907"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "data.archive_file.lambda_code": {
                    "type": "archive_file",
                    "depends_on": [],
                    "primary": {
                        "id": "5cb6bbbdd4a64f56fc9284f446fb3e3307542e3e",
                        "attributes": {
                            "id": "5cb6bbbdd4a64f56fc9284f446fb3e3307542e3e",
                            "output_base64sha256": "YkVSq7PuOaiO0/C5gEAhDpyN6LdlzAUgzh8LGwOLQfE=",
                            "output_md5": "28ffc9b1154f5c2098ac7014a4656cee",
                            "output_path": "lambda.zip",
                            "output_sha": "5cb6bbbdd4a64f56fc9284f446fb3e3307542e3e",
                            "output_size": "1118",
                            "source.#": "0",
                            "source_file": "lambda.js",
                            "type": "zip"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.archive"
                },
                "data.aws_kms_key.ssm": {
                    "type": "aws_kms_key",
                    "depends_on": [],
                    "primary": {
                        "id": "f501007d-4e2f-4474-a224-648df3141fc5",
                        "attributes": {
                            "arn": "arn:aws:kms:ap-south-1:570193561522:key/f501007d-4e2f-4474-a224-648df3141fc5",
                            "aws_account_id": "570193561522",
                            "creation_date": "2018-10-29T09:19:17Z",
                            "description": "KMS key for SSM",
                            "enabled": "true",
                            "expiration_model": "",
                            "id": "f501007d-4e2f-4474-a224-648df3141fc5",
                            "key_id": "alias/ssm-key",
                            "key_manager": "CUSTOMER",
                            "key_state": "Enabled",
                            "key_usage": "ENCRYPT_DECRYPT",
                            "origin": "AWS_KMS"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "data.template_file.amazon_linux_automation": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "72bf08e8aec68f7979565436f19d050ac1e5d65116dbcf662831b7f806d1c56b",
                        "attributes": {
                            "id": "72bf08e8aec68f7979565436f19d050ac1e5d65116dbcf662831b7f806d1c56b",
                            "rendered": "{\n    \"description\": \"Launch Automation for Amazon Linux instance\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installdependencies\"\n        },\n        {\n            \"name\": \"installdependencies\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"yum update -y\\n\",\n                        \"curl -O https://bootstrap.pypa.io/get-pip.py\\n\",\n                        \"python get-pip.py\\n\",\n                        \"pip install awscli\\n\",\n                        \"yum install sssd realmd oddjob oddjob-mkhomedir samba-common samba-common-tools krb5-workstation openldap-clients policycoreutils-python -y\\n\",\n                        \"echo Packages are installed\"\n                    ]\n                }\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\",\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"if realm list |grep $domain; then echo \\\"Host has already joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n                        \"hostname=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`hostname`].Value' --output text)\\n\",\n                        \"if [ -z \\\"$hostname\\\" ]; then echo \\\"hostname (case sensitive) tag is not defined so exiting\\\"; exit -1; fi\\n\",\n                        \"echo $hostname.$domain \u003e /etc/hostname\\n\",\n                        \"echo 127.0.0.1 $hostname.$domain $hostname \u003e /etc/hosts\\n\",\n                        \"echo \\\"Hostname has changed and rebooting now\\\"\\n\",\n                        \"reboot\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"joinDomain\"\n        },\n        {\n            \"name\": \"joinDomain\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"ouPath=$(aws ssm get-parameters --names /domain/ou_path --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"username=$(aws ssm get-parameters --names /domain/username --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"password=$(aws ssm get-parameters --names /domain/password --with-decryption --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"for i in 1 2 3 4 5;\\n\",\n                        \"do\\n\",\n                        \"echo $password | sudo realm join --membership-software=samba -U $username --computer-ou=$ouPath $domain \u0026\u0026 echo \\\"Host has joined domain successfully after $i retries\\\" \u0026\u0026 break;\\n\",\n                        \"done\\n\",\n                        \"if ! sudo realm list |grep $domain; then echo \\\"Host has not joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"sudo shutdown -r 1\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterDomainJoin\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"modifySSSD\"\n        },\n        {\n            \"name\": \"modifySSSD\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"domain=`realm list|head -1`\\n\",\n                        \"cp /etc/sssd/sssd.conf /etc/sssd/sssd.conf.backup\\n\",\n                        \"echo dyndns_update = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_refresh_interval = 43200 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_update_ptr = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_ttl = 3600 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo Updated sssd.conf, now restarting sssd service\\n\",\n                        \"/bin/systemctl restart sssd.service\\n\",\n                        \"cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup\\n\",\n                        \"sed -i -e 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\\n\",\n                        \"echo Updated sshd_config, now restarting sshd service\\n\",\n                        \"/bin/systemctl restart sshd.service\\n\",\n                        \"echo \\\"CIOCloudmanagement@$domain ALL=(ALL) ALL\\\" \u003e\u003e /etc/sudoers.d/CIOCloudmanagement\"\n                    ]\n                }\n            }\n        }\n    ]\n}",
                            "template": "{\n    \"description\": \"Launch Automation for Amazon Linux instance\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installdependencies\"\n        },\n        {\n            \"name\": \"installdependencies\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"yum update -y\\n\",\n                        \"curl -O https://bootstrap.pypa.io/get-pip.py\\n\",\n                        \"python get-pip.py\\n\",\n                        \"pip install awscli\\n\",\n                        \"yum install sssd realmd oddjob oddjob-mkhomedir samba-common samba-common-tools krb5-workstation openldap-clients policycoreutils-python -y\\n\",\n                        \"echo Packages are installed\"\n                    ]\n                }\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\",\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"if realm list |grep $domain; then echo \\\"Host has already joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n                        \"hostname=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`hostname`].Value' --output text)\\n\",\n                        \"if [ -z \\\"$hostname\\\" ]; then echo \\\"hostname (case sensitive) tag is not defined so exiting\\\"; exit -1; fi\\n\",\n                        \"echo $hostname.$domain \u003e /etc/hostname\\n\",\n                        \"echo 127.0.0.1 $hostname.$domain $hostname \u003e /etc/hosts\\n\",\n                        \"echo \\\"Hostname has changed and rebooting now\\\"\\n\",\n                        \"reboot\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"joinDomain\"\n        },\n        {\n            \"name\": \"joinDomain\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"ouPath=$(aws ssm get-parameters --names /domain/ou_path --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"username=$(aws ssm get-parameters --names /domain/username --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"password=$(aws ssm get-parameters --names /domain/password --with-decryption --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"for i in 1 2 3 4 5;\\n\",\n                        \"do\\n\",\n                        \"echo $password | sudo realm join --membership-software=samba -U $username --computer-ou=$ouPath $domain \u0026\u0026 echo \\\"Host has joined domain successfully after $i retries\\\" \u0026\u0026 break;\\n\",\n                        \"done\\n\",\n                        \"if ! sudo realm list |grep $domain; then echo \\\"Host has not joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"sudo shutdown -r 1\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterDomainJoin\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"modifySSSD\"\n        },\n        {\n            \"name\": \"modifySSSD\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"domain=`realm list|head -1`\\n\",\n                        \"cp /etc/sssd/sssd.conf /etc/sssd/sssd.conf.backup\\n\",\n                        \"echo dyndns_update = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_refresh_interval = 43200 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_update_ptr = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_ttl = 3600 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo Updated sssd.conf, now restarting sssd service\\n\",\n                        \"/bin/systemctl restart sssd.service\\n\",\n                        \"cp /etc/ssh/sshd_config /etc/ssh/sshd_config.backup\\n\",\n                        \"sed -i -e 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\\n\",\n                        \"echo Updated sshd_config, now restarting sshd service\\n\",\n                        \"/bin/systemctl restart sshd.service\\n\",\n                        \"echo \\\"${sudoers}@$domain ALL=(ALL) ALL\\\" \u003e\u003e /etc/sudoers.d/${sudoers}\"\n                    ]\n                }\n            }\n        }\n    ]\n}",
                            "vars.%": "1",
                            "vars.sudoers": "CIOCloudmanagement"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.centos_linux_automation": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "7f3166d53a9bdab064546ceafbcad2633a1fc0dd9b337558175ba012b7c690b4",
                        "attributes": {
                            "id": "7f3166d53a9bdab064546ceafbcad2633a1fc0dd9b337558175ba012b7c690b4",
                            "rendered": "{\n    \"description\": \"Launch Automation for CentOS Linux instance\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installdependencies\"\n        },\n        {\n            \"name\": \"installdependencies\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"yum update -y\\n\",\n                        \"curl -O https://bootstrap.pypa.io/get-pip.py\\n\",\n                        \"python get-pip.py\\n\",\n                        \"pip install awscli\\n\",\n                        \"sudo yum install sssd realmd oddjob oddjob-mkhomedir adcli krb5-workstation openldap-clients policycoreutils-python -y\\n\",\n                        \"echo Packages are installed\"\n                    ]\n                }\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\",\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"if realm list |grep $domain; then echo \\\"Host has already joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n                        \"hostname=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`hostname`].Value' --output text)\\n\",\n                        \"if [ -z \\\"$hostname\\\" ]; then echo \\\"hostname (case sensitive) tag is not defined so exiting\\\"; exit -1; fi\\n\",\n                        \"echo $hostname.$domain \u003e /etc/hostname\\n\",\n                        \"echo 127.0.0.1 $hostname.$domain $hostname \u003e /etc/hosts\\n\",\n                        \"echo \\\"Hostname has changed and rebooting now\\\"\\n\",\n                        \"reboot\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"joinDomain\"\n        },\n        {\n            \"name\": \"joinDomain\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"ouPath=$(aws ssm get-parameters --names /domain/ou_path --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"username=$(aws ssm get-parameters --names /domain/username --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"password=$(aws ssm get-parameters --names /domain/password --with-decryption --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"for i in 1 2 3 4 5;\\n\",\n                        \"do\\n\",\n                        \"echo $password | sudo realm join --membership-software=adcli -U $username --computer-ou=$ouPath $domain \u0026\u0026 echo \\\"Host has joined domain successfully after $i retries\\\" \u0026\u0026 break;\\n\",\n                        \"done\\n\",\n                        \"if ! sudo realm list |grep $domain; then echo \\\"Host has not joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"sudo shutdown -r 1\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterDomainJoin\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"modifySSSD\"\n        },\n        {\n            \"name\": \"modifySSSD\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"domain=`realm list|head -1`\\n\",\n                        \"cp /etc/sssd/sssd.conf /etc/sssd/sssd.conf.backup\\n\",\n                        \"echo dyndns_update = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_refresh_interval = 43200 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_update_ptr = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_ttl = 3600 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo Updated sssd.conf, now restarting sssd service\\n\",\n                        \"/bin/systemctl restart sssd.service\\n\",\n                        \"cp /etc/ssh/sshd_config  /etc/ssh/sshd_config.backup\\n\",\n                        \"sed -i -e 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\\n\",\n                        \"echo Updated sshd_config, now restarting sshd service\\n\",\n                        \"/bin/systemctl restart sshd.service\\n\",\n                        \"echo \\\"CIOCloudmanagement@$domain ALL=(ALL) ALL\\\" \u003e\u003e /etc/sudoers.d/CIOCloudmanagement\"\n                    ]\n                }\n            }\n        }\n    ]\n}",
                            "template": "{\n    \"description\": \"Launch Automation for CentOS Linux instance\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installdependencies\"\n        },\n        {\n            \"name\": \"installdependencies\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"yum update -y\\n\",\n                        \"curl -O https://bootstrap.pypa.io/get-pip.py\\n\",\n                        \"python get-pip.py\\n\",\n                        \"pip install awscli\\n\",\n                        \"sudo yum install sssd realmd oddjob oddjob-mkhomedir adcli krb5-workstation openldap-clients policycoreutils-python -y\\n\",\n                        \"echo Packages are installed\"\n                    ]\n                }\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\",\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"if realm list |grep $domain; then echo \\\"Host has already joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n                        \"hostname=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`hostname`].Value' --output text)\\n\",\n                        \"if [ -z \\\"$hostname\\\" ]; then echo \\\"hostname (case sensitive) tag is not defined so exiting\\\"; exit -1; fi\\n\",\n                        \"echo $hostname.$domain \u003e /etc/hostname\\n\",\n                        \"echo 127.0.0.1 $hostname.$domain $hostname \u003e /etc/hosts\\n\",\n                        \"echo \\\"Hostname has changed and rebooting now\\\"\\n\",\n                        \"reboot\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"joinDomain\"\n        },\n        {\n            \"name\": \"joinDomain\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"ouPath=$(aws ssm get-parameters --names /domain/ou_path --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"username=$(aws ssm get-parameters --names /domain/username --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"password=$(aws ssm get-parameters --names /domain/password --with-decryption --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"for i in 1 2 3 4 5;\\n\",\n                        \"do\\n\",\n                        \"echo $password | sudo realm join --membership-software=adcli -U $username --computer-ou=$ouPath $domain \u0026\u0026 echo \\\"Host has joined domain successfully after $i retries\\\" \u0026\u0026 break;\\n\",\n                        \"done\\n\",\n                        \"if ! sudo realm list |grep $domain; then echo \\\"Host has not joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"sudo shutdown -r 1\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterDomainJoin\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"modifySSSD\"\n        },\n        {\n            \"name\": \"modifySSSD\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"domain=`realm list|head -1`\\n\",\n                        \"cp /etc/sssd/sssd.conf /etc/sssd/sssd.conf.backup\\n\",\n                        \"echo dyndns_update = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_refresh_interval = 43200 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_update_ptr = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_ttl = 3600 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo Updated sssd.conf, now restarting sssd service\\n\",\n                        \"/bin/systemctl restart sssd.service\\n\",\n                        \"cp /etc/ssh/sshd_config  /etc/ssh/sshd_config.backup\\n\",\n                        \"sed -i -e 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\\n\",\n                        \"echo Updated sshd_config, now restarting sshd service\\n\",\n                        \"/bin/systemctl restart sshd.service\\n\",\n                        \"echo \\\"${sudoers}@$domain ALL=(ALL) ALL\\\" \u003e\u003e /etc/sudoers.d/${sudoers}\"\n                    ]\n                }\n            }\n        }\n    ]\n}",
                            "vars.%": "1",
                            "vars.sudoers": "CIOCloudmanagement"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.redhat_linux_automation": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "760799812765d1ef184ce584bbf552106d51ec84085a4ca22b7b46599b0671ad",
                        "attributes": {
                            "id": "760799812765d1ef184ce584bbf552106d51ec84085a4ca22b7b46599b0671ad",
                            "rendered": "{\n    \"description\": \"Launch Automation for RedHat Linux instance\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"installdependencies\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"yum update -y\\n\",\n                        \"curl -O https://bootstrap.pypa.io/get-pip.py\\n\",\n                        \"python get-pip.py\\n\",\n                        \"pip install awscli\\n\",\n                        \"sudo yum install sssd realmd oddjob oddjob-mkhomedir adcli krb5-workstation openldap-clients policycoreutils-python -y\\n\",\n                        \"echo Packages are installed\"\n                    ]\n                }\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\",\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"if realm list |grep $domain; then echo \\\"Host has already joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n                        \"hostname=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`hostname`].Value' --output text)\\n\",\n                        \"if [ -z \\\"$hostname\\\" ]; then echo \\\"hostname (case sensitive) tag is not defined so exiting\\\"; exit -1; fi\\n\",\n                        \"echo $hostname.$domain \u003e /etc/hostname\\n\",\n                        \"echo 127.0.0.1 $hostname.$domain $hostname \u003e /etc/hosts\\n\",\n                        \"echo \\\"Hostname has changed and rebooting now\\\"\\n\",\n                        \"reboot\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"joinDomain\"\n        },\n        {\n            \"name\": \"joinDomain\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"ouPath=$(aws ssm get-parameters --names /domain/ou_path --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"username=$(aws ssm get-parameters --names /domain/username --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"password=$(aws ssm get-parameters --names /domain/password --with-decryption --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"for i in 1 2 3 4 5;\\n\",\n                        \"do\\n\",\n                        \"echo $password | sudo realm join --membership-software=adcli -U $username --computer-ou=$ouPath $domain \u0026\u0026 echo \\\"Host has joined domain successfully after $i retries\\\" \u0026\u0026 break;\\n\",\n                        \"done\\n\",\n                        \"if ! sudo realm list |grep $domain; then echo \\\"Host has not joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"sudo shutdown -r 1\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterDomainJoin\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"modifySSSD\"\n        },\n        {\n            \"name\": \"modifySSSD\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"domain=`realm list|head -1`\\n\",\n                        \"cp /etc/sssd/sssd.conf /etc/sssd/sssd.conf.backup\\n\",\n                        \"echo dyndns_update = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_refresh_interval = 43200 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_update_ptr = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_ttl = 3600 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo Updated sssd.conf, now restarting sssd service\\n\",\n                        \"/bin/systemctl restart sssd.service\\n\",\n                        \"cp /etc/ssh/sshd_config  /etc/ssh/sshd_config.backup\\n\",\n                        \"sed -i -e 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\\n\",\n                        \"echo Updated sshd_config, now restarting sshd service\\n\",\n                        \"/bin/systemctl restart sshd.service\\n\",\n                        \"echo \\\"CIOCloudmanagement@$domain ALL=(ALL) ALL\\\" \u003e\u003e /etc/sudoers.d/CIOCloudmanagement\"\n                    ]\n                }\n            }\n        }\n    ]\n}",
                            "template": "{\n    \"description\": \"Launch Automation for RedHat Linux instance\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"installdependencies\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"yum update -y\\n\",\n                        \"curl -O https://bootstrap.pypa.io/get-pip.py\\n\",\n                        \"python get-pip.py\\n\",\n                        \"pip install awscli\\n\",\n                        \"sudo yum install sssd realmd oddjob oddjob-mkhomedir adcli krb5-workstation openldap-clients policycoreutils-python -y\\n\",\n                        \"echo Packages are installed\"\n                    ]\n                }\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\",\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"if realm list |grep $domain; then echo \\\"Host has already joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n                        \"hostname=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`hostname`].Value' --output text)\\n\",\n                        \"if [ -z \\\"$hostname\\\" ]; then echo \\\"hostname (case sensitive) tag is not defined so exiting\\\"; exit -1; fi\\n\",\n                        \"echo $hostname.$domain \u003e /etc/hostname\\n\",\n                        \"echo 127.0.0.1 $hostname.$domain $hostname \u003e /etc/hosts\\n\",\n                        \"echo \\\"Hostname has changed and rebooting now\\\"\\n\",\n                        \"reboot\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"joinDomain\"\n        },\n        {\n            \"name\": \"joinDomain\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"ouPath=$(aws ssm get-parameters --names /domain/ou_path --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"username=$(aws ssm get-parameters --names /domain/username --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"password=$(aws ssm get-parameters --names /domain/password --with-decryption --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"for i in 1 2 3 4 5;\\n\",\n                        \"do\\n\",\n                        \"echo $password | sudo realm join --membership-software=adcli -U $username --computer-ou=$ouPath $domain \u0026\u0026 echo \\\"Host has joined domain successfully after $i retries\\\" \u0026\u0026 break;\\n\",\n                        \"done\\n\",\n                        \"if ! sudo realm list |grep $domain; then echo \\\"Host has not joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"sudo shutdown -r 1\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterDomainJoin\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"modifySSSD\"\n        },\n        {\n            \"name\": \"modifySSSD\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"domain=`realm list|head -1`\\n\",\n                        \"cp /etc/sssd/sssd.conf /etc/sssd/sssd.conf.backup\\n\",\n                        \"echo dyndns_update = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_refresh_interval = 43200 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_update_ptr = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_ttl = 3600 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo Updated sssd.conf, now restarting sssd service\\n\",\n                        \"/bin/systemctl restart sssd.service\\n\",\n                        \"cp /etc/ssh/sshd_config  /etc/ssh/sshd_config.backup\\n\",\n                        \"sed -i -e 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\\n\",\n                        \"echo Updated sshd_config, now restarting sshd service\\n\",\n                        \"/bin/systemctl restart sshd.service\\n\",\n                        \"echo \\\"${sudoers}@$domain ALL=(ALL) ALL\\\" \u003e\u003e /etc/sudoers.d/${sudoers}\"\n                    ]\n                }\n            }\n        }\n    ]\n}",
                            "vars.%": "1",
                            "vars.sudoers": "CIOCloudmanagement"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.ubuntu_linux_automation": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "eb7c74dce15b45418b77b717d4c4c3b7ed5cf30d300f93404ff5372b780d6b32",
                        "attributes": {
                            "id": "eb7c74dce15b45418b77b717d4c4c3b7ed5cf30d300f93404ff5372b780d6b32",
                            "rendered": "{\n    \"description\": \"Launch Automation for Ubuntu Linux instance\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installdependencies\"\n        },\n        {\n            \"name\": \"installdependencies\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"apt-get update -y\\n\",\n                        \"curl -O https://bootstrap.pypa.io/get-pip.py\\n\",\n                        \"python get-pip.py\\n\",\n                        \"pip install awscli\\n\",\n                        \"apt-get install sssd realmd krb5-user packagekit oddjob oddjob-mkhomedir samba-common samba-common-tools krb5-workstation openldap-clients policycoreutils-python -y\\n\",\n                        \"echo Packages are installed\"\n                    ]\n                }\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\",\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"if realm list |grep $domain; then echo \\\"Host has already joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n                        \"hostname=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`hostname`].Value' --output text)\\n\",\n                        \"ipv4=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\\n\",\n                        \"if [ -z \\\"$hostname\\\" ]; then echo \\\"hostname (case sensitive) tag is not defined so exiting\\\"; exit -1; fi\\n\",\n                        \"echo $hostname.$domain \u003e /etc/hostname\\n\",\n                        \"echo 127.0.0.1 $hostname.$domain \u003e /etc/hosts\\n\",\n                        \"echo \\\"$ipv4 $hostname\\\" \u003e\u003e /etc/hosts\\n\",\n                        \"echo \\\"Hostname has changed and rebooting now\\\"\\n\",\n                        \"reboot\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"joinDomain\"\n        },\n        {\n            \"name\": \"joinDomain\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"ouPath=$(aws ssm get-parameters --names /domain/ou_path --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"username=$(aws ssm get-parameters --names /domain/username --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"password=$(aws ssm get-parameters --names /domain/password --with-decryption --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"for i in 1 2 3 4 5;\\n\",\n                        \"do\\n\",\n                        \"echo $password | sudo realm join --membership-software=samba -U $username --computer-ou=$ouPath $domain \u0026\u0026 echo \\\"Host has joined domain successfully after $i retries\\\" \u0026\u0026 break;\\n\",\n                        \"done\\n\",\n                        \"if ! sudo realm list |grep $domain; then echo \\\"Host has not joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"sudo shutdown -r 1\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterDomainJoin\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"modifySSSD\"\n        },\n        {\n            \"name\": \"modifySSSD\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"domain=`realm list|head -1`\\n\",\n                        \"cp /etc/sssd/sssd.conf /etc/sssd/sssd.conf.backup\\n\",\n                        \"echo dyndns_update = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_refresh_interval = 43200 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_update_ptr = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_ttl = 3600 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo Updated sssd.conf, now restarting sssd service\\n\",\n                        \"/bin/systemctl restart sssd.service\\n\",\n                        \"cp /etc/ssh/sshd_config  /etc/ssh/sshd_config.backup\\n\",\n                        \"sed -i -e 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\\n\",\n                        \"echo Updated sshd_config, now restarting sshd service\\n\",\n                        \"/bin/systemctl restart sshd.service\\n\",\n                        \"echo \\\"CIOCloudmanagement@$domain ALL=(ALL) ALL\\\" \u003e\u003e /etc/sudoers.d/CIOCloudmanagement\"\n                    ]\n                }\n            }\n        }\n    ]\n}",
                            "template": "{\n    \"description\": \"Launch Automation for Ubuntu Linux instance\",\n    \"schemaVersion\": \"0.3\",\n    \"parameters\": {\n        \"instanceIds\": {\n            \"type\": \"StringList\",\n            \"description\": \"InstanceIds to run launch setup\"\n        }\n    },\n    \"mainSteps\": [{\n            \"name\": \"waitForInstancesToStart\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"installdependencies\"\n        },\n        {\n            \"name\": \"installdependencies\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Continue\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"apt-get update -y\\n\",\n                        \"curl -O https://bootstrap.pypa.io/get-pip.py\\n\",\n                        \"python get-pip.py\\n\",\n                        \"pip install awscli\\n\",\n                        \"apt-get install sssd realmd krb5-user packagekit oddjob oddjob-mkhomedir samba-common samba-common-tools krb5-workstation openldap-clients policycoreutils-python -y\\n\",\n                        \"echo Packages are installed\"\n                    ]\n                }\n            },\n            \"nextStep\": \"changeHostname\"\n        },\n        {\n            \"name\": \"changeHostname\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\",\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"if realm list |grep $domain; then echo \\\"Host has already joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n                        \"hostname=$(aws ec2 describe-instances --instance-id $instanceId --region ap-south-1 --query 'Reservations[0].Instances[0].Tags[?Key==`hostname`].Value' --output text)\\n\",\n                        \"ipv4=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\\n\",\n                        \"if [ -z \\\"$hostname\\\" ]; then echo \\\"hostname (case sensitive) tag is not defined so exiting\\\"; exit -1; fi\\n\",\n                        \"echo $hostname.$domain \u003e /etc/hostname\\n\",\n                        \"echo 127.0.0.1 $hostname.$domain \u003e /etc/hosts\\n\",\n                        \"echo \\\"$ipv4 $hostname\\\" \u003e\u003e /etc/hosts\\n\",\n                        \"echo \\\"Hostname has changed and rebooting now\\\"\\n\",\n                        \"reboot\"\n                    ]\n                }\n            },\n            \"nextStep\": \"waitForInstancesToStartAfterReboot\"\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterReboot\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"joinDomain\"\n        },\n        {\n            \"name\": \"joinDomain\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"domain=$(aws ssm get-parameters --names /domain/name --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"ouPath=$(aws ssm get-parameters --names /domain/ou_path --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"username=$(aws ssm get-parameters --names /domain/username --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"password=$(aws ssm get-parameters --names /domain/password --with-decryption --region ap-south-1 --query 'Parameters[0].Value' --output text)\\n\",\n                        \"for i in 1 2 3 4 5;\\n\",\n                        \"do\\n\",\n                        \"echo $password | sudo realm join --membership-software=samba -U $username --computer-ou=$ouPath $domain \u0026\u0026 echo \\\"Host has joined domain successfully after $i retries\\\" \u0026\u0026 break;\\n\",\n                        \"done\\n\",\n                        \"if ! sudo realm list |grep $domain; then echo \\\"Host has not joined $domain so exiting\\\"; exit -1; fi;\\n\",\n                        \"sudo shutdown -r 1\"\n                    ]\n                }\n            }\n        },\n        {\n            \"name\": \"waitForInstancesToStartAfterDomainJoin\",\n            \"action\": \"aws:changeInstanceState\",\n            \"timeoutSeconds\": 600,\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"InstanceIds\": [\n                    \"{{instanceIds}}\"\n                ],\n                \"CheckStateOnly\": true,\n                \"DesiredState\": \"running\"\n            },\n            \"nextStep\": \"modifySSSD\"\n        },\n        {\n            \"name\": \"modifySSSD\",\n            \"action\": \"aws:runCommand\",\n            \"onFailure\": \"Abort\",\n            \"inputs\": {\n                \"DocumentName\": \"AWS-RunShellScript\",\n                \"InstanceIds\": [\"{{instanceIds}}\"],\n                \"Parameters\": {\n                    \"commands\": [\n                        \"sudo su -\\n\",\n                        \"domain=`realm list|head -1`\\n\",\n                        \"cp /etc/sssd/sssd.conf /etc/sssd/sssd.conf.backup\\n\",\n                        \"echo dyndns_update = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_refresh_interval = 43200 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_update_ptr = true \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo dyndns_ttl = 3600 \u003e\u003e /etc/sssd/sssd.conf\\n\",\n                        \"echo Updated sssd.conf, now restarting sssd service\\n\",\n                        \"/bin/systemctl restart sssd.service\\n\",\n                        \"cp /etc/ssh/sshd_config  /etc/ssh/sshd_config.backup\\n\",\n                        \"sed -i -e 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config\\n\",\n                        \"echo Updated sshd_config, now restarting sshd service\\n\",\n                        \"/bin/systemctl restart sshd.service\\n\",\n                        \"echo \\\"${sudoers}@$domain ALL=(ALL) ALL\\\" \u003e\u003e /etc/sudoers.d/${sudoers}\"\n                    ]\n                }\n            }\n        }\n    ]\n}",
                            "vars.%": "1",
                            "vars.sudoers": "CIOCloudmanagement"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                }
            },
            "depends_on": []
        }
    ]
}
